(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '___menuId___'"
p3
sS'layer'
p4
S'/Users/Liwen/Desktop/GroupOrder/applications/GroupOrder/controllers/default.py'
p5
sS'code'
p6
S'\n\n\ndef index():\n    return dict()\n\n\n\ndef reset():\n  db(db.Menus.id> 0).delete()\n  db(db.MenuDetails.id>0).delete()\n  db(db.Groups.id>0).delete()\n  return\n\n\n\ndef loadGroup():\n    rows = db(db.Groups.id > 0).select()\n    d = {r.id: {\'groupName\': r.groupName,\n                \'groupId\': r.id}\n         for r in rows}\n    return response.json(dict(groupList=d))\n\n\n@auth.requires_signature()\ndef createGroup():\n    db.Groups.insert(groupName = request.vars.groupName,\n                     groupCreator = request.vars.groupCreator)\n    rows = db(db.Groups.id > 0).select()\n    d = {r.id: {\'groupName\': r.groupName,\n                \'groupId\': r.id}\n         for r in rows}\n    return response.json(dict(groupList=d))\n\n\n\n\ndef groupOrders():\n    groupId = request.args[0]\n    return dict(groupId=groupId)\n\n\ndef loadMenuOrderList():\n    menu_rows = db(db.Menus.groupId == request.vars.groupId).select()\n    menu_d = {r.id: {\'menuName\': r.menuName,\n                \'menuId\': r.id}\n         for r in menu_rows}\n\n    order_rows = db(db.GroupOrders.groupId==request.vars.groupId).select()\n    order_d = {r.id: {\'groupOrderDeadline\': r.groupOrderDeadline,\n                      \'menuId\': r.menuId,\n                      \'creatorFirstName\': r.creatorLastName,\n                      \'menuName\': r.menuName,\n                      }\n               for r in order_rows}\n    return response.json(dict(displayMenu=menu_d, displayOrder=order_d))\n\n\n\ndef addMenuList():\n\n    # menuList = json.load(request.vars.menuList)\n\n    db.Menus.insert(menuName = request.vars.menuName,\n                    menuCreator = request.vars.menuCreator,\n                    groupId = request.vars.groupId)\n\n    rows = db(db.Menus.id > 0).select()\n    thisMenu = rows.last()\n\n    db.MenuDetails.insert(itemName = request.vars.item1,\n                          itemPrice = request.vars.price1,\n                           menuId = thisMenu.id)\n\n    db.MenuDetails.insert(itemName = request.vars.item2,\n                      itemPrice = request.vars.price2,\n                     menuId = thisMenu.id)\n\n    db.MenuDetails.insert(itemName=request.vars.item3,\n                      itemPrice=request.vars.price3,\n                      menuId=thisMenu.id)\n\n    rows = db(db.Menus.groupId == request.vars.groupId).select()\n\n    d = {r.id: {\'menuName\': r.menuName,\n\n                \'menuId\': r.id}\n         for r in rows}\n    return response.json(dict(displayMenu=d))\n\n\ndef getMenuDetail():\n    rows = db(db.MenuDetails.menuId == request.vars.menuId).select()\n    d = {r.id: {\'itemName\': r.itemName,\n                \'itemPrice\': r.itemPrice,\n                \'itemId\': r.id}\n         for r in rows}\n    return response.json(dict(displayMenuDetail=d))\n\n\n\ndef addOrder():\n    creatorFirsts = db(db.auth_user.id == auth.user_id).select()\n    creatorLasts = db(db.auth_user.id == auth.user_id).select()\n    menuNames = db(db.Menus.id == request.vars.menuId).select()\n    creatorFirst = creatorFirsts[0].first_name\n    creatorLast = creatorLasts[0].last_name\n    menuName = menuNames[0].menuName\n    db.GroupOrders.insert(groupOrderCreator=auth.user_id,\n                          creatorFirstName=creatorFirst,\n                          creatorLastName=creatorLast,\n                          groupOrderDeadline=request.vars.deadline,\n                          menuId=request.vars.menuId,\n                          menuName=menuName,\n                          groupId=request.vars.groupId)\n\n    order_rows = db(db.GroupOrders.groupId==request.vars.groupId).select()\n    order_d = {r.id: {\'groupOrderDeadline\': r.groupOrderDeadline,\n                      \'menuId\': r.menuId,\n                      \'creatorFirstName\': r.creatorLastName,\n                      \'menuName\': r.menuName,\n                      \'groupOrderId\': r.id,\n                      }\n               for r in order_rows}\n    return response.json(dict(displayOrder=order_d))\n\n\n\ndef resetOrder():\n    db(db.GroupOrders.id> 0).delete()\n    return\n\n\ndef singleOrders():\n    menuId = request.args[0]\n    # groupOrderId = request.args[1]\n    return dict(menuId=menuId)\n\n\ndef addSingleOrders():\n\n\n    return "ok"\n\n\n\n\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\nresponse._vars=response._caller(getMenuDetail)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Liwen/Desktop/GroupOrder/applications/GroupOrder/controllers/default.py", line 190, in <module>\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Liwen/Desktop/GroupOrder/applications/GroupOrder/controllers/default.py", line 93, in getMenuDetail\n    rows = db(db.MenuDetails.menuId == request.vars.menuId).select()\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 1273, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 1160, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 945, in expand\n    rv = op(first, second, **optional_args)\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 839, in EQ\n    self.expand(second, first.type))\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 955, in expand\n    rv = self.represent(expression, field_type)\n  File "/Users/Liwen/Desktop/GroupOrder/gluon/packages/dal/pydal/adapters/base.py", line 1432, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'___menuId___\'\n'
p11
s.